/*
ID: scottn1
PROG: castle
LANG: C++
*/
#include <bits/stdc++.h>
using namespace std;
#define T
int a[52][52];
int blocks[2550];
int fb[52][52];
int vis[52][52];
int f[52][52];//连通块标号
int m, n;
int maxsize = 0;
int bindmax = 0;
int amt = 0;//count the rooms
int tot;//current dfs max room size
int solve(int x, int y, int cnt)
{

    if(x < 1 || x > n) return 0;
    if(y < 1 || y > m) return 0;
    if(vis[x][y]) return 0;

    if(!cnt && !vis[x][y]) {amt++; tot = 0; }
    f[x][y] = amt;
    tot++;

    if(tot > blocks[amt]) blocks[amt] = tot;

    if(tot > maxsize) maxsize = tot;
    vis[x][y] = tot;

    if(!(a[x][y] & 1)) {solve(x, y-1, vis[x][y]); vis[x][y] = max(vis[x][y], vis[x][y-1]);}
    if(!(a[x][y] & 2)) {solve(x-1, y, vis[x][y]); vis[x][y] = max(vis[x][y], vis[x-1][y]);}
    if(!(a[x][y] & 4)) {solve(x, y+1, vis[x][y]); vis[x][y] = max(vis[x][y], vis[x][y+1]);}
    if(!(a[x][y] & 8)) {solve(x+1, y, vis[x][y]); vis[x][y] = max(vis[x][y], vis[x+1][y]);}


    return tot;
}

int main()
{
    #ifdef T
        freopen("castle.in", "r", stdin);
        freopen("castle.out", "w", stdout);
    #endif

    cin >> m >> n;
    int bestx, besty;
    char dir;

    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            scanf("%d", &a[i][j]);
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            if(!vis[i][j])
                vis[i][j] = solve(i, j, 0);

    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            fb[i][j] = blocks[f[i][j]];

    for(int j = 1; j <= m; j++)
    {
        for(int i = n; i >= 1; i--)
        {
            if((a[i][j] & 2)&&f[i][j]!=f[i-1][j])
            {
                int tmp = fb[i][j]+fb[i-1][j];
                if(tmp > bindmax) {bindmax=tmp; bestx=i; besty=j; dir='N';}
                else if(tmp == bindmax)
                {
                    if(j < besty){besty=j;bestx=i;dir='N';}
                    else if(i > bestx && j==besty){bestx=i;dir='N';}
                }
            }
            if((a[i][j] & 4)&&f[i][j]!=f[i][j+1])
            {
                int tmp = fb[i][j]+fb[i][j+1];
                if(tmp > bindmax) {bindmax=tmp; bestx=i; besty=j; dir='E';}
                else if(tmp == bindmax)
                {
                    if(j < besty){besty=j;bestx=i;dir='E';}
                    else if(i > bestx&& j==besty){bestx=i;dir='E';}
                }
            }
        }
    }

    printf("%d\n", amt);
    printf("%d\n", maxsize);
    printf("%d\n", bindmax);
    printf("%d %d %c\n", bestx, besty, dir);

    return 0;
}

