/*
ID: scottn1
LANG: C++
TASK: ttwo
*/

#include <bits/stdc++.h>
using namespace std;
#define T
char g[12][12];
char dir[4] = {'N', 'E', 'S', 'W'};
//北东南西
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
int ans;
int ok;
void dfs(int fx, int fy, int fd, int cx, int cy, int cd, int p)
{
    if(fx==cx && fy == cy){ans = p;  return;}
    if(g[fx+dx[fd]][fy+dy[fd]]=='*') fd = (fd+1)%4;
    else {fx += dx[fd]; fy+=dy[fd];}
    if(g[cx+dx[cd]][cy+dy[cd]]=='*') cd = (cd+1)%4;
    else {cx +=dx[cd]; cy+=dy[cd];}
    p++;
//这题目一看就是一个模拟题，但是问题在于我们什么时候结束这次的模拟判断他们不可能相遇。
//开始的时候我想了几种可能循环的情况作为结束的判断条件，但都是超时；
//然后我想可不可设置一个时间上限来作为结束模拟的条件，然后我就设了一个上限100000，没想到AC了，
//后面我给改成1000还是可以AC。。。。。。。
//
//后面看了一下官方的解答，我的思路是对的，但是上限设小了。
//考虑将一个格子的坐标加上站在这个格子中时面向的方向作为一个状态，
//那么每个人有4*10*10=400个状态，然后两个人状态的组合数为400*400=160000，
//如果我们模拟160000次走遍这些状态然后还是不能相遇那么就肯定不能相遇了。所以正确的上限是160000
//参考：http://blog.csdn.net/acm_lkl/article/details/44651759
    if(p > 160000) {ans = 0; return;}
    dfs(fx, fy, fd, cx, cy, cd, p);
}

int main()
{

    #ifdef T
	freopen("ttwo.in", "r", stdin);
	freopen("ttwo.out", "w", stdout);
	#endif
	int fx, fy, fd, cx, cy, cd;
	for(int i = 1; i <= 10; i++)
        for(int j = 1; j <= 10; j++)
        {
            cin >> g[i][j];
            if(g[i][j] == 'F')
            {
                fx = i; fy = j;
            }
            if(g[i][j]=='C')
            {
                cx = i; cy = j;
            }
        }
    for(int j = 0; j <= 11; j++)
    {
        g[0][j] = '*'; g[11][j] = '*';
    }
    for(int i = 0; i <= 11; i++)
    {
        g[i][0] = '*'; g[i][11] = '*';
    }
    //cout << "yes " << endl;
    fd = 0; cd = 0;
    dfs(fx, fy, fd, cx, cy, cd, ans);
    cout << ans << endl;

    return 0;

}
