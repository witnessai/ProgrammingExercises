/*
ID: scottn1
LANG: C++
TASK: maze1
*/

#include <bits/stdc++.h>
using namespace std;
#define T
//对地图的预处理可以
//1.将入口封住
//2.将地图替换成01数字
const int MAXH = 102;
const int MAXW = 40;

char graph[MAXH<<1|1][MAXW<<1|1];
bool hash[MAXH][MAXW];
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
int W, H, zx[2], zy[2];
int dist[2][MAXH][MAXW];
struct Node
{
    int x, y, t;
};
void ReadData()
{   // Read the maze and find two start points

    int k = 0;
    scanf("%d %d", &W, &H);
    for ( int i=1; i<=( H<<1|1 ); ++i )
    {
        getchar();
        for ( int j=1; j<=( W<<1|1 ); ++j )
        {
            scanf("%c", &graph[i][j]);
            if ( ( i==1 || i==(H<<1|1) ) && graph[i][j]==' ' )
            {
                if ( i==1 ) zx[k] = 1, zy[k] = j/2;
                else    zx[k] = H, zy[k] = j/2;

				++k, graph[i][j] = '-'; // 封闭入口
            }
            if ( ( j==1 || j==(W<<1|1) ) && graph[i][j]==' ' )
            {
                if ( j==1 ) zx[k] = i/2, zy[k] = 1;
                else    zx[k] = i/2, zy[k] = W;

				++k, graph[i][j] = '|'; // 封闭入口
            }
        }
    }
}// ReadData

bool IsOut( int x, int y )
{
    return ( x<1 || y<1 || x>(H<<1|1) || y>(W<<1|1) );
}// IsOut

void bfs( int ss, int tt, int index )
{
    Node c, n;
    queue <Node> q;

    // Init
    hash[ss][tt] = true;
    dist[index][ss][tt] = 1;    // 从入口走到起点，走了一步
    c.x = ss, c.y = tt, c.t = 1;

    q.push( c );
    while ( !q.empty() )
    {
        c = q.front();
        q.pop();

        for ( int k=0; k<4; ++k )
        {
            if ( graph[ 2*c.x+dx[k] ][ 2*c.y+dy[k] ]==' ' ) // 判断下一步的方向上是否有障碍物
            {
                n.x = c.x+dx[k], n.y = c.y+dy[k];
                if ( hash[n.x][n.y] )   continue;

                hash[n.x][n.y] = true;
                n.t = dist[index][n.x][n.y] = c.t+1;
                q.push( n );
            }// legal position
        }
    }// End of while
}// bfs

int main()
{
    freopen("maze1.in", "r", stdin);
    freopen("maze1.out", "w", stdout);

    ReadData();

    bfs( zx[0], zy[0], 0 );   // first start point, index of array dist

    memset( hash, false, sizeof(hash) );
    bfs( zx[1], zy[1], 1 );   // second start point, index of array dist

    int min, max=-1;
    for ( int i=1; i<=H; ++i )
    {
        for ( int j=1; j<=W; ++j )
        {
            min = dist[0][i][j]<dist[1][i][j] ? dist[0][i][j]:dist[1][i][j];
            max = min>max ? min:max;
        }
    }// Find the result

    printf("%d\n", max);

//	system("pause");
    return 0;
}



/*
ID: demnzha1
PROG: maze1
LANG: C++
*/
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

typedef pair<int, int> pii;
const int MAXN = 500;
const int dx[4] = {-1, +0, +0, +1},
          dy[4] = {+0, -1, +1, +0};
int n, m;
int tmp[MAXN], g[MAXN][MAXN], dis[MAXN][MAXN];

queue<pii> q;
void bfs(int x1, int y1, int x2, int y2)
{
    memset(dis, -1, sizeof(dis));
    dis[x1][y1] = dis[x2][y2] = 0;
    q.push(make_pair(x1, y1)); q.push(make_pair(x2, y2));
    while (!q.empty()) {
        pii head = q.front(); q.pop();
        int ux = head.first, uy = head.second;
        for (int i = 0; i < 4; i++) {
            int vx = ux + dx[i], vy = uy + dy[i];
            if (vx < 0 || vx >= n || vy < 0 || vy >= m || g[vx][vy]) continue;
            if (dis[vx][vy] == -1 || dis[vx][vy] > dis[ux][uy]) {
                q.push(make_pair(vx, vy));
                if (vx % 2 == 0 || vy % 2 == 0) dis[vx][vy] = dis[ux][uy];
                else dis[vx][vy] = dis[ux][uy] + 1;
            }
        }
    }
}
int main()
{
    freopen("maze1.in", "r", stdin);
    freopen("maze1.out", "w", stdout);
    scanf("%d%d", &m, &n); getchar();
    n = n * 2 + 1; m = m * 2 + 1;
    int x1 = -1, y1 = -1, x2, y2;
    for (int i = 0; i < n; i++, getchar())
        for (int j = 0; j < m; j++) {
            char ch ; scanf("%c", &ch);
            if (ch == ' ') g[i][j] = 0;
            else g[i][j] = 1;
            if (g[i][j] == 0 && (i == 0 || j == 0 || i == n - 1 || j == m - 1))
                if (x1 == -1) {x1 = i; y1 = j;}
                else {x2 = i; y2 = j;}
        }
    bfs(x1, y1, x2, y2);
    int ans = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            ans = max(ans, dis[i][j]);
    printf("%d\n", ans);
    fclose(stdin); fclose(stdout);
    return 0;
}
