# 2.最小生成树  


## prim  
西电版数据结构课本， 荣政主编
typedef struct{
	int frontvex, endvex;
	float length;
}edge;
float dist[n][n];
edge T[n-1];
void Prim(int i){
	int j, k, m, v, min, max=100000;
	flaot d;
	edge 3;
	v = i;
	for(j=0;j<=n-2;j++)
	{
		T[j].frontvex=v;
		if(j>=v)
		{
			T[j].endvex=j+1;
			T[j].length=dist[v][j+1];
		}
		else
		{
			T[j].endvex=j;
			T[j].length=dist[v][j];
		}
	}
	for(k=0;k<n-1;k++)
	{
		min = max;
		for(j=k;j<n-1;j++)
		{
			if(T[j].length<min)
			{
				min = T[j].length;
				m=j;
			}
		}
		e = T[m];
		T[m]=T[k];
		T[k]=e;
		v=T[k].endvex;
		for(j = k+1; j < n-1; j++)
		{
			d = dist[v][T[j].endvex];
			if(d < T[j].length){
				T[j].length = d;
				T[j].frontvex = v;
			}
		}
	}
}

## kruscal

克鲁斯卡尔（Kruskal）算法（只与边相关）

算法描述：克鲁斯卡尔算法需要对图的边进行访问，所以克鲁斯卡尔算法的时间复杂度只和边又关系，可以证明其时间复杂度为O（eloge）。
算法过程：
1.将图各边按照权值进行排序
2.将图遍历一次，找出权值最小的边，（条件：此次找出的边不能和已加入最小生成树集合的边构成环），若符合条件，则加入最小生成树的集合中。不符合条件则继续遍历图，寻找下一个最小权值的边。
3.递归重复步骤1，直到找出n-1条边为止（设图有n个结点，则最小生成树的边数应为n-1条），算法结束。得到的就是此图的最小生成树。

克鲁斯卡尔（Kruskal）算法因为只与边相关，则适合求稀疏图的最小生成树。而prime算法因为只与顶点有关，所以适合求稠密图的最小生成树。

来源： http://blog.csdn.net/niushuai666/article/details/6689285

代码参考西电数据结构课本，荣政主编
课本代码有错误，有增删，测试（通过课本的样例）
#include <cstdio>
#define MAX 1000
typedef struct{
	int frontvex, endvex;
	float length;
	int sign; //该边是否已选择过的标志信息
}edge;
edge g_T[MAX];
int g_G[MAX]; //判断该边的两个顶点是否在同一个分量上的数组中
void Kruskal(int n, int e)
{
    int i, j, k, l, MinEdge, min;
    for(i = 0; i < n; i++)
        g_G[i] = i;
    for(i = 0; i < e; i++)
    {
        scanf("%d%d%f", &g_T[i].frontvex, &g_T[i].endvex, &g_T[i].length);
        g_T[i].sign = 0;
    }
    j = 0;
    while(j < n-1)
    {
        min = 1000;
        for(i = 0; i < e; i++)
        {
            if(g_T[i].sign == 0)
            {
                if(g_T[i].length < min)
                {
                    min = g_T[i].length;
                    MinEdge = i;
                    k = g_T[i].frontvex;
                    l = g_T[i].endvex;
                    //g_T[i].sign = 1;
                }
            }
        }
        g_T[MinEdge].sign = 1;
        if(g_G[k] == g_G[l])
            g_T[MinEdge].sign = 2;
        else
        {
            j++;
            for(i = 0; i < n; i++)
            {
                //若换成此部分注释代码会报错
                // if(g_G[i] == g_G[l] || g_G[i] == g_G[k])
                //     //g_G[i] = g_G[k];
                //     g_G[i] = 100;
                g_G[l] = g_G[k] = -1;
            }
        }
    }
}
//打印输出结果
void print(int n, int e)
{
    for(int i = 0; i < n; i++)
        printf("%d %d\n", i, g_G[i]);
    for(int i = 0; i < e; i++)
        if(g_T[i].sign == 1)
            printf("%d--%d\n", g_T[i].frontvex, g_T[i].endvex);
}
int main()
{
    int n, e;
    scanf("%d%d", &n, &e);
    Kruskal(n, e);
    print(n, e);
    return 0;
}








