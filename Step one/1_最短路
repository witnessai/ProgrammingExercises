# 1.最短路(Floyd、Dijkstra,BellmanFord)  

## Dijkstra
参考:  
http://baike.baidu.com/item/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95?fr=aladdin   


Dijkstra是单源最短路径的有效算法，但是要求权值非负  
解释为什么要求权值非负：    
http://www.cnblogs.com/tanhehe/archive/2013/02/03/2890767.html  

西电版《数据结构与算法分析》 荣政主编  


        float D[n];  
        int p[n], s[n]; //p[i]表示从原点到达顶点i时，顶点i的前驱顶点  
                        //s[i]记录最短路径生成的情况  
                        //s[i]=1表示源点到顶点i的最短路径已经产生  
                        //s[i]=0表示最短路径还没有产生  
        void Dijkstra(int v, float dist[][n])  
        {  
            int MAX = 10000;  
            int min, pre;  
            for(int i = 0; i < n; i++)  
            {  
                D[i] = dist[v][i];  
                
                //以下部分感觉要修改  
                //if(i != v   &&  D[i] != Max)  
                //  p[i] = v+1;  
                //else if(i == v)  
                //  p[i] = -1;//自身的前驱顶点修改为-1：  
                //else  
                //  p[i] = 0;  
                
                
                if(D[i]!=MAX)  
                    p[i] = v+1;  
                else  
                    p[i] = 0;    
                s[i] = 0;  
            }  
            
            s[v]=1;
            for(int i = 0; i < n; i++)
            {
                int min = MAX+1;
                for(int j = 0; j < n; j++)
                {
                    if(!s[j] && D[j] < min)
                    {
                        min = D[j];
                        k = j;
                    }
                }
                s[k] = 1;
                for(int j = 0; j < n; j++)
                {
                    if(!s[j] && D[j] > D[k]+dist[k][j])
                    {
                        D[j] = D[k]+dist[k][j];
                        p[i] = k+1;
                    }
                }
            }  
            
            //输出结果  
            for(int i = 0; i < n; i++)  
            {  
                printf("%f%d", D[i], i);  
                pre = p[i];  
                while((pre!=0) && (pre!=v+1))  
                {  
                    printf("<-%d", pre-1);  
                    pre = p[pre-1];  
                }  
                printf("<-%d", v);  
            }  
        }  
        
      
      
## Floyd  

        //path给出了每一对顶点之间的最短路径,p[i][j]所保存的值时顶点i到顶点j的路径中j的前驱顶点    
        //A[n][n]矩阵来保存每部所求的的所有顶点对之间的当前最短路径长度  
        int path[n][n];  
        void Floyd(float A[n][n], float dist[n][n])  
        {  
            int MAX = 10000;  
            int pre;
            for(int i = 0; i < n; i++)  
            {  
                for(int j = 0; j < n; j++)  
                {  
                    if(dist[i][j] != MAX)  
                        path[i][j] = i+1;  
                    else  
                        path[i][j] = 0;  
                        
                    A[i][j] = dist[i][j];
                }  
                
                
                for(int k = 0; k < n; k++)  
                {
                    for（int i = 0; i < n; i++)  
                    {  
                        for(int j = 0; j < n; j++)  
                        {  
                            if(A[i][j] > A[i][k]+A[k][j])  
                            {  
                                A[i][j] = A[i][k] + A[k][j];
                                path[i][j] = path[k][j];  
                                
                            }
                        }
                    }
                }  
                for(int i = 0; i < n; i++)  
                {  
                    for(int j = 0; j < n; j++)  
                    {  
                        printf("%d %d", A[i][j], j);
                        pre = path[i][j];
                        while(pre!=0 && pre!=i+1)  
                        {  
                            printf("<-%d", pre-1);
                            pre = path[i][pre-1];
                        }
                        printf("<-%d\n", i);
                        
                    }
                }
                
                
            }
    
    
## Bellman-Ford   
参考：   
http://www.cnblogs.com/tanky_woo/archive/2011/01/17/1937728.html  
http://blog.csdn.net/niushuai666/article/details/6791765


        #include <iostream>  
        #include <cstdio>  
        using namespace std;  
        
        #define MAX 0x3f3f3f3f  
        #define N 1010  
        int nodenum, edgenum, original;  
        
        typedef struct Edge  
        {  
            int u, v;  
            int cost;  
        }Edge;  
        Edge edge[N];  
        int dis[N], pre[N];  
        
        bool Bellman_Ford()  
        {
            for(int i = 1; i <= nodenum; i++)  
                dis[i] = (i == original)? 0 : MAX;  
            for(int i = 1; i <= nodenum-1; ++i)  
                for(int j = 1; j <= edgenum; ++j)  
                    if(dis[edge[j].v] > dis[edge[j].u] + edge[j].cost)  
                    {  
                        dis[edge[j].v] = dis[edge[j].u] + edge[j].cost;
                        pre[edge[j].v] = edge[j].u;
                    }  
                    bool flag = 1;  
                    for(int i = 1; i <= edgenum; i++)  
                        if(dis[edge[i].v] > dis[edge[i].u]+edge[i].cost)  
                        {  
                            flag = 0; 
                            break;
                        }  
            return flag;  
         }
         
         void print_path(int root)  
         {  
             while(root != pre[root])
             {
                 printf("%d-->", root);
                 root = pre[root];

             }  
             if(root == pre[root])  
                 pritnf("%d\n", root);
                
         }
         
         int main()  
         {  
             scanf("%d%d%d", &nodenum, &edgenum, &original);  
             pre[original] = original;  
             for(int i = 1; i <=edgenum; i++)  
             {  
                 scanf("%d%d%d", &edge[i].u, &edge[i].v, &edge[i].cost);
             }
             if(Bellman_Ford())  
                 for(int i = 1; i <= nodenum; i++)  
                 {  
                     printf("%d\n", dis[i]);  
                      printf("Path:");  
                     printf_path(i);
                 }  
             else  
                 printf("have negative circle\n");  
                 
             return 0;    
            
            
          }



 ## SPFA算法

 http://blog.csdn.net/runninghui/article/details/8895586

#include <iostream>
#inlcude <cstring>
#include <queue>
using namespace std;
const int inf = 0x3f3f3f3f;
const in maxn = 100;
int map[maxn][maxn];
int dis[maxn];
bool vis[maxn];
int num[maxn];//记录每个节点入队的次数

struct cmp
{
    bool operator()(int x, int y)
    {return x > y;}
};
bool SPFA(int s0, int n)
{
    priority_queue<int, vector<int>, cmp>q;
    memset(vis, false, sizeof(vis));
    memset(num, 0, sizeof(num));

    for(int i = 0; i < n; i++)
        dis[i] = inf;
    dis[s0] = 0;
    q.push(s0);
    vis[s0] = true;
    num[s0]++;
    while(!q.empty())
    {
        int p = q.top();
        q.pop();
        for(int i= 0; i < n; i++)
        {
            if(dis[p]+map[p][i]<dis[i])
            {
                if(!vis[i])
                {
                    q.push(i);
                    num[i]++;
                    if(num[i]>n)//存在负环
                    {
                        return false;
                    }
                    vis[i] = true;

                }
            }
        }
        vis[p] = false;

    }
        
    return true;
}       
         
