4.二分查找(代码可在五行以内)
参考： 
作者：LightGHLi 
链接：https://www.zhihu.com/question/36132386 
来源：知乎

对其进行分类：取整方式：向下取整 向上取整 （共2种） 
区间开闭：闭区间 左闭右开区间 左开右闭区间 开区间 （共4种） 
问题类型： 
对于不下降序列a，求最小的i，使得a[i] = key 
对于不下降序列a，求最大的i，使得a[i] = key 
对于不下降序列a，求最小的i，使得a[i] > key 
对于不下降序列a，求最大的i，使得a[i] < key 
对于不上升序列a，求最小的i，使得a[i] = key 
对于不上升序列a，求最大的i，使得a[i] = key 
对于不上升序列a，求最小的i，使得a[i] < key 
对于不上升序列a，求最大的i，使得a[i] > key（共8种） 
综上所述，二分查找共有 248 种写法。 
算法的目的是解决问题，下面以针对不下降序列a的4个问题为例，给出我认为效率较高，较为简洁的代码。 
对于不下降序列a，n为序列a元素的个数，key为关键字： 
1.求最小的i，使得a[i]=key,若不存在，则返回-1

int binary_search_1(int a[], int n, int key)  
{  
    int m, l = 0, r = n-1;//闭区间[0, n-1]  
    while(l < r)  
    {  
        m = l+((r-l)>>1);//向下取整  
        if(a[m] < key) l = m+1;  
        else r = m;  
    }  
    if(a[r] == key) return r;  
    else return -1;  
}
2.求最大的i,使得a[i]=key,若不存在，则返回-1

int binary_search_2(int a[], int n, int key)
{
    int m, l = 0, r = n-1;//闭区间[0, n-1]
    while(l < r)
    {
        m = l+((r-l+1)>>1);//向上取整
        if(a[m] <= key) l = m;
        else r = m-1;
    }
    if(a[l] == key) return l;
    else return -1;
}
3.求最小的i,使得a[i]>key,若不存在，则返回-1

int binary_search_3(int a[], int n, int key)
{
    int m, l = 0, r = n-1;
    while(l < r)
    {
        m = l+((r-l)>>1);
        if(a[m]<=key) l = m+1;
        else r = m;
    }
    if(a[r] > key) return r;
    else return -1;
}
4.求最大的i,使得a[i]\<key,若不存在，则返回-1

int binary_search_4(int a[], int n, int key)
{
    int m, l = 0, r = n-1;
    while(l < r)
    {
        m = l+((r-l+1)>>1);
        if(a[m]\<key) l = m;
        else r = m-1;
    }
    if(a[l] < key) return l;
    else return -1;
}
